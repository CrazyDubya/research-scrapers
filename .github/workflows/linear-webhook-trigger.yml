name: Linear Webhook Trigger

on:
  repository_dispatch:
    types: [linear-task-created, linear-task-updated]

permissions:
  contents: read
  id-token: write
  actions: write  # Required to trigger other workflows

env:
  PYTHON_VERSION: '3.11'

jobs:
  process-linear-webhook:
    name: Process Linear Webhook Event
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Parse webhook payload
        id: parse
        run: |
          # Extract Linear task information from webhook payload
          TASK_ID="${{ github.event.client_payload.task_id }}"
          TASK_TITLE="${{ github.event.client_payload.task_title }}"
          TASK_DESCRIPTION="${{ github.event.client_payload.task_description }}"
          TASK_LABELS="${{ github.event.client_payload.labels }}"
          
          echo "task_id=${TASK_ID}" >> $GITHUB_OUTPUT
          echo "task_title=${TASK_TITLE}" >> $GITHUB_OUTPUT
          
          # Parse labels to determine scraper type
          SCRAPER_TYPE="github_repo"
          if [[ "${TASK_LABELS}" == *"scrape-issues"* ]]; then
            SCRAPER_TYPE="github_issue"
          elif [[ "${TASK_LABELS}" == *"scrape-users"* ]]; then
            SCRAPER_TYPE="github_user"
          elif [[ "${TASK_LABELS}" == *"scrape-all"* ]]; then
            SCRAPER_TYPE="all"
          fi
          
          echo "scraper_type=${SCRAPER_TYPE}" >> $GITHUB_OUTPUT
          
          # Extract target from description or title
          TARGET=$(echo "${TASK_DESCRIPTION}" | grep -oP 'target:\s*\K[^\s]+' || echo "")
          echo "target=${TARGET}" >> $GITHUB_OUTPUT
          
          echo "::notice::Webhook received for task ${TASK_ID}: ${TASK_TITLE}"
      
      - name: Check Linear API key availability
        id: check_linear
        run: |
          if [ -z "${{ secrets.LINEAR_API_KEY }}" ]; then
            echo "has_linear_key=false" >> $GITHUB_OUTPUT
            echo "::warning::LINEAR_API_KEY not configured - Linear status updates will be skipped"
          else
            echo "has_linear_key=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate webhook data
        run: |
          if [ -z "${{ steps.parse.outputs.task_id }}" ]; then
            echo "::error::No task ID found in webhook payload"
            exit 1
          fi
          
          echo "::notice::Valid webhook data received"
      
      - name: Trigger research scraper workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'research-scraper-scheduled.yml',
                ref: 'main',
                inputs: {
                  scraper_type: '${{ steps.parse.outputs.scraper_type }}',
                  target: '${{ steps.parse.outputs.target }}',
                  linear_task_id: '${{ steps.parse.outputs.task_id }}',
                  update_linear: 'true'
                }
              });
              
              core.notice(`Triggered scraper workflow for Linear task ${{ steps.parse.outputs.task_id }}`);
            } catch (error) {
              core.setFailed(`Failed to trigger workflow: ${error.message}`);
              throw error;
            }
      
      - name: Update Linear task status
        if: steps.check_linear.outputs.has_linear_key == 'true'
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          TASK_ID: ${{ steps.parse.outputs.task_id }}
        run: |
          # Create a simple status update script inline with proper error handling
          python3 <<EOF
import os
import json
import urllib.request
import urllib.error
import sys

api_key = os.environ.get('LINEAR_API_KEY')
task_id = os.environ.get('TASK_ID')

if not api_key:
    print("Warning: LINEAR_API_KEY not set, skipping Linear update")
    sys.exit(0)

if not task_id:
    print("Warning: No task ID provided, skipping Linear update")
    sys.exit(0)

query = """
mutation UpdateIssue(\$id: String!, \$comment: String!) {
  issueUpdate(
    id: \$id,
    input: {
      stateId: "in_progress"
    }
  ) {
    success
    issue {
      id
      title
      state {
        name
      }
    }
  }
  commentCreate(
    input: {
      issueId: \$id,
      body: \$comment
    }
  ) {
    success
  }
}
"""

workflow_url = f"{os.environ.get('GITHUB_SERVER_URL', '')}/{os.environ.get('GITHUB_REPOSITORY', '')}/actions/runs/{os.environ.get('GITHUB_RUN_ID', '')}"
variables = {
    "id": task_id,
    "comment": f"🤖 Research scraper workflow triggered from GitHub Actions.\\nWorkflow: {workflow_url}"
}

headers = {
    'Content-Type': 'application/json',
    'Authorization': api_key
}

data = json.dumps({
    'query': query,
    'variables': variables
}).encode('utf-8')

req = urllib.request.Request(
    'https://api.linear.app/graphql',
    data=data,
    headers=headers
)

try:
    with urllib.request.urlopen(req, timeout=10) as response:
        result = json.loads(response.read().decode('utf-8'))
        if result.get('data', {}).get('issueUpdate', {}).get('success'):
            print(f"✅ Linear task {task_id} updated successfully")
        else:
            error_msg = result.get('errors', [{}])[0].get('message', 'Unknown error')
            print(f"⚠️ Failed to update Linear task: {error_msg}")
            sys.exit(1)
except urllib.error.HTTPError as e:
    print(f"⚠️ HTTP Error updating Linear task: {e.code} - {e.reason}")
    sys.exit(1)
except urllib.error.URLError as e:
    print(f"⚠️ Network error updating Linear task: {e.reason}")
    sys.exit(1)
except json.JSONDecodeError as e:
    print(f"⚠️ Invalid JSON response from Linear API: {e}")
    sys.exit(1)
except Exception as e:
    print(f"⚠️ Unexpected error updating Linear task: {e}")
    sys.exit(1)
EOF
          
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to update Linear task status, but continuing workflow"
          fi
      
      - name: Create summary
        if: always()
        run: |
          echo "# Linear Webhook Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Task ID**: \`${{ steps.parse.outputs.task_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Task Title**: ${{ steps.parse.outputs.task_title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scraper Type**: \`${{ steps.parse.outputs.scraper_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: \`${{ steps.parse.outputs.target || 'default' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_linear.outputs.has_linear_key }}" != "true" ]; then
            echo "⚠️ **Note**: Linear status updates were skipped due to missing API key" >> $GITHUB_STEP_SUMMARY
          fi
